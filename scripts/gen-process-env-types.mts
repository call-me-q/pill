import { findMonorepoRoot } from "@alienfast/find-monorepo-root";
import * as fs from "fs";
import * as path from "path";

// Parse CLI arguments
const parseArguments = (): { output: string } => {
  const args = process.argv.slice(2); // Skip "node" and script name
  const outputArgIndex = args.indexOf("--output");

  if (outputArgIndex === -1 || outputArgIndex + 1 >= args.length) {
    console.error(
      "Usage: [tsx|node] file.[mts|mjs] --output <output-file-path>"
    );
    process.exit(1);
  }

  const output = args[outputArgIndex + 1];
  return { output };
};

const { output: outputFilePath } = parseArguments();

// Resolve the .env file path
const resolveEnvFilePath = async (): Promise<string> => {
  const mainFilePath = await findMonorepoRoot(process.cwd()).then(
    (result) => result.dir
  );
  console.log(mainFilePath);
  if (!mainFilePath) {
    console.error("Could not determine the main module's filename.");
    process.exit(1);
  }
  return path.resolve(mainFilePath, ".env");
};

const envFilePath = await resolveEnvFilePath();

if (!fs.existsSync(envFilePath)) {
  console.error(".env file not found at:", envFilePath);
  process.exit(1);
}

// Read and parse the .env file
const parseEnvFile = (filePath: string): Record<string, string> => {
  const content = fs.readFileSync(filePath, "utf-8");
  const variables: Record<string, string> = {};

  content.split(/\r?\n/).forEach((line) => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith("#")) {
      const [key, ...valueParts] = trimmedLine.split("=");
      const value = valueParts.join("=").replace(/^['"]|['"]$/g, ""); // Remove surrounding quotes
      if (key) variables[key] = value;
    }
  });

  return variables;
};

const envVariables = parseEnvFile(envFilePath);

// Generate TypeScript type definitions
const generateTypeDefinitions = (variables: Record<string, string>): string => {
  const typeEntries = Object.keys(variables)
    .map((key) => `      ${key}: string;`)
    .join("\n");

  return `/**
 * Auto-generated file based on the .env file.
 * DO NOT EDIT THIS FILE MANUALLY.
 */

export {};

declare global {
  namespace NodeJS {
    interface ProcessEnv {
${typeEntries}
    }
  }
}`;
};

const typeDefinitions = generateTypeDefinitions(envVariables);

// Write the type definitions to environment.d.ts
const writeTypeDefinitions = (
  definitions: string,
  outputDirPath: string
): void => {
  const outputFilePath = path.resolve(outputDirPath, "environment.d.ts");
  fs.writeFileSync(outputFilePath, definitions.trim() + "\n");
  console.log(`Generated TypeScript definitions in ${outputFilePath}`);
};

// Use the CLI argument for the output file
writeTypeDefinitions(typeDefinitions, outputFilePath);
